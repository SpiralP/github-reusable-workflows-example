import{spawn as I}from"node:child_process";import{PassThrough as J}from"node:stream";var K=[/^(?<severity>warning|error)(:?\[\S+\])?: (?<message>[^\n]+)\n  --> (?<file>\S+):(?<line>\d+):(?<col>\d+)$/gm,/^(?<severity>warning|error): (?<message>[^\n]+)\n(?!  --> )$/gm,/^(?<file>\S+):(?<line>\d+):(?<col>\d+): (?<severity>warning|error)(:?\[\S+\])?: (?<message>[^\n]+)$/gm,/^.*panicked at (?<file>\S+):(?<line>\d+):(?<col>\d+):\n(?<message>.+)$/gm,/^(?<message>.*panicked) at (?<file>\S+):(?<line>\d+):(?<col>\d+)(?!:)$/gm],D=new Set;function E(B){K.flatMap((q)=>[...B.matchAll(q)]).forEach((q)=>{let{groups:b}=q;if(!b||!b.message)return;let{message:z}=b,j=q[0].includes("panicked")?"error":"warning";if(b.severity){if(j=b.severity.toLowerCase(),j==="warn")j="warning";else if(j==="error")j="error"}if(!b.file&&z.startsWith("unused manifest key: "))b.file="Cargo.toml";if(b.file&&!b.line&&!b.col)b.line="1",b.col="1";let C=`::${j}::${z}`;if(b.file&&b.line&&b.col){let{file:F,line:G,col:H}=b;C=`::${j} file=${F},line=${G},col=${H}::${z}`}if(!D.has(C))D.add(C),console.error(`
`+C)})}function L(B){if(!B[0])console.error("No command provided to execute."),process.exit(1);let q=I(B[0],B.slice(1),{stdio:["ignore","pipe","pipe"]});q.on("error",(j)=>{console.error(`Error executing command: ${j.message}`),process.exit(1)});let b=new J;q.stdout.pipe(b),q.stderr.pipe(b),b.pipe(process.stdout);let z="";b.on("data",(j)=>{z+=j.toString(),E(z)}),b.on("end",()=>{E(z+`

`)}),q.on("close",(j)=>{console.error(`Command exited with code ${j}`),process.exit(j)})}L(process.argv.slice(2));
